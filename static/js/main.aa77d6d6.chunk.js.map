{"version":3,"sources":["Nav.js","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Nav","state","handleChange","e","_this","setState","value","target","submit","props","search","react_default","a","createElement","className","placeholder","onChange","this","Button","onClick","Component","Recipe","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","Container","Row","Col","xs","md","alt","src","recipes","image_url","width","height","title","length","concat","substring","publisher","href","source_url","App","recipeShow","handleSearch","input","url","fetch","then","response","json","data","console","log","componentDidMount","map","recipe","src_Recipe","Nav_Nav","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa77d6d6.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Nav.css'\nimport {Button} from 'react-bootstrap'\n\nexport default class Nav extends Component {\nstate ={}\n    handleChange=e=>{\nthis.setState({value: e.target.value})\n    }\n\n    submit=()=>{\n\n        this.props.search(this.state.value)\n    }\n    render() {\n        return (\n        <div>\n            <nav className=\"title\">\n            </nav>\n            <div className=\"searchingBar\">\n                <input className=\"searchBox\" placeholder=\"   I Want To Make ...\" onChange={this.handleChange}></input>\n                <Button onClick={this.submit} className=\"search newBtn\" > Search</Button>\n            </div>\n        \n        </div>\n        )\n    }\n    }\n","import React, { Component } from 'react'\nimport './Nav.css'\nimport {Row} from 'react-bootstrap'\nimport {Container} from 'react-bootstrap'\nimport {Col} from 'react-bootstrap'\n\n\nexport class Recipe extends Component {\n    render() {\n        return (\n        <div className='container'>\n            <Container>\n            <Row>\n            <Col xs={6} md={4}>\n            <div className=\"card\">\n            <img alt='' className=\"Pic\" src={this.props.recipes.image_url}  width='300px' height='300px' />\n                <div className=\"detail\">\n                <p>{this.props.recipes.title.length <20 ? `${this.props.recipes.title}`: `${this.props.recipes.title.substring(0,25)}...`}</p>\n                <h6>Publisher:  <h7>{this.props.recipes.publisher}</h7></h6>\n                <a href={this.props.recipes.source_url}>View Recipe</a> \n            \n            </div>\n            </div>\n            </Col>\n            \n        </Row>\n        </Container>\n        </div>\n        )\n    }\n    }\n\nexport default Recipe\n","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from './Nav'\nimport Recipe from './Recipe';\n\n\nclass App extends Component {\n  state={\n    recipeShow :[]\n  }\n  // function for user search to get a recipe as user Input ...\n  handleSearch=input =>{\n    const url = `https://www.food2fork.com/api/search?key=ae4094d32b86720d5ae572f751c926d0&q=${input}&count=27 `\n    fetch(url).then(response => {\n      response.json().then(data => {\n      console.log(data) // take a look at what you get back!\n        \n      // console.log();\n      \n        this.setState({recipeShow: data.recipes})\n      })\n      }\n    )\n  }\n  \n  componentDidMount= () => {\n      // api key1 a66b740af013fda9a5b735cd25a08f14\n      // api key2 ae4094d32b86720d5ae572f751c926d0 \n      // api key3 903d1a52f97c8d79bb5008bdf73e8e48\n      // api key4 21fe3157728163bad920b76b86ffe824\n    const url = 'https://www.food2fork.com/api/search?key=ae4094d32b86720d5ae572f751c926d0'\n    fetch(url).then(response => {\n      response.json().then(data => {\n      console.log(data) // take a look at what you get back!\n        \n      // console.log();\n      \n        this.setState({recipeShow: data.recipes})\n      })\n      }\n    )\n  }\n\n  render() {\n    // map() for show every elements in array\n      const recipes= this.state.recipeShow.map(recipe=> {\n        return  <Recipe recipes ={recipe} />\n      })\n      console.log(recipes) \n      return (\n        \n        <div className=\"App\">\n      <Nav search={this.handleSearch} />\n      {recipes}\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}